using ReMod.Core.Managers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ReMod.Core;
using System;
using ReModCE.PhotonExtension;
using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Realtime;
using UnityEngine;
using ReMod.Core.UI.QuickMenu;
using ReMod.Core.Managers;
using ReModCE.EvilEyeSDK;
using System.Collections;
using VRC.SDKBase;
using Il2CppSystem;
using VRC.Udon;

namespace ReModCE.Exploits
{
	internal class Udon : ModComponent
	{
		public static bool _UdonSpamEnabled;
		private static ReMenuToggle _UdonSpamToggled;
		public Udon()
		{
		}

		public override void OnUiManagerInit(UiManager uiManager)
		{
			var exploitMenu = uiManager.MainMenu.GetCategoryPage("Exploits").GetCategory("Udon");
			_UdonSpamToggled = exploitMenu.AddToggle("Udon Spammer", "Spams UDON events, causing weird things to happen dependent on the world.", StartUdon, _UdonSpamEnabled);
		}

		public void StartUdon(bool value)
		{
			_UdonSpamEnabled = value;
			_UdonSpamToggled?.Toggle(value);

			if (_UdonSpamEnabled)
			{
				MelonCoroutines.Start(PerformUdon());
			}
			if (!_UdonSpamEnabled)
			{
				MelonCoroutines.Stop(PerformUdon());
			}
		}

		public static IEnumerator PerformUdon()
		{
			while (true)
			{
				if (_UdonSpamEnabled)
				{
					while (PlayerWrapper.LocalVRCPlayer() == null)
					{
						yield return new WaitForEndOfFrame();
					}
					foreach (UdonBehaviour udonBehaviour in UnityEngine.Object.FindObjectsOfType<UdonBehaviour>())
					{
						Il2CppSystem.Collections.Generic.Dictionary<string, Il2CppSystem.Collections.Generic.List<uint>>.Enumerator enumerator = udonBehaviour._eventTable.GetEnumerator();
						while (enumerator.MoveNext())
						{
							Il2CppSystem.Collections.Generic.KeyValuePair<string, Il2CppSystem.Collections.Generic.List<uint>> current = enumerator.current;
							udonBehaviour.SendCustomNetworkEvent(0, current.key);
							current = null;
						}
						enumerator = null;
					}
					if (!_UdonSpamEnabled)
					{
						yield break;
					}
				}
				if (!_UdonSpamEnabled)
				{
					yield break;
				}
				yield return new WaitForSeconds(0.8f);
			}
		}
	}
}
